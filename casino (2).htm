<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>3Dスロットマシン</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background: url('image.jpeg') no-repeat center center fixed;
            background-size: cover;
            overflow: hidden;
        }

        .slot-machine {
            text-align: center;
            background: rgba(0, 0, 0, 0.7);
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 0 60px rgba(255, 255, 255, 0.8), 0 0 120px rgba(255, 0, 255, 0.4);
            z-index: 1;
        }

        .reels {
            display: flex;
            justify-content: center;
            margin-bottom: 30px;
        }

        .reel-container {
            perspective: 1200px;
            margin: 0 15px;
        }

        .reel {
            width: 120px;
            height: 200px;
            background: linear-gradient(45deg, red, orange, yellow, green, blue, indigo, violet);
            border-radius: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 3em;
            color: #fff;
            box-shadow: 0 0 40px white, 0 0 80px #ff0;
            transform-style: preserve-3d;
            transition: transform 0.8s ease-out;
        }

        .controls {
            margin-top: 20px;
        }

        button {
            background: linear-gradient(45deg, #ff00cc, #3333ff);
            color: white;
            border: none;
            padding: 20px 40px;
            font-size: 2em;
            cursor: pointer;
            border-radius: 10px;
            transition: background 0.3s, transform 0.2s;
            box-shadow: 0 0 25px rgba(255, 255, 255, 0.9);
        }

        button:hover {
            background: linear-gradient(45deg, #ff66ff, #66ffff);
            transform: scale(1.1);
        }

        .petal {
            position: fixed;
            top: -50px;
            width: 20px;
            height: 20px;
            background-image: url('sakura.png');
            background-size: cover;
            pointer-events: none;
            z-index: 9999;
            animation: fall linear infinite;
        }

        @keyframes fall {
            to {
                transform: translateY(110vh) rotateX(720deg) rotateY(720deg) rotateZ(720deg);
                opacity: 0.5;
            }
        }
    </style>
</head>
<body>
    <div class="slot-machine">
        <div class="reels">
            <div class="reel-container"><div class="reel" id="reel1"></div></div>
            <div class="reel-container"><div class="reel" id="reel2"></div></div>
            <div class="reel-container"><div class="reel" id="reel3"></div></div>
        </div>
        <div class="controls">
            <button id="spinButton">スピン</button>
        </div>
    </div>

    <script>
        const symbols = ["🍒", "🍋", "🍉", "🍇", "🔔", "7️⃣"];
        const spinButton = document.getElementById("spinButton");
        const reels = [
            document.getElementById("reel1"),
            document.getElementById("reel2"),
            document.getElementById("reel3")
        ];

        // 初期位置を保存するための変数
        const initialPositions = [];

        // 各リールの初期位置を取得して保存
        reels.forEach(reel => {
            const transformMatrix = window.getComputedStyle(reel).transform;
            initialPositions.push(transformMatrix);
        });

        spinButton.addEventListener("click", () => {
            const rotations = Array.from({ length: 15 }, () => Math.floor(Math.random() * 720)); // 15個のランダムな回転
            reels.forEach((reel, index) => {
                let count = 0;
                const interval = setInterval(() => {
                    reel.innerHTML = symbols[Math.floor(Math.random() * symbols.length)];
                    count++;
                    const transformStr = rotations.map(() => `rotate3d(${Math.random()},${Math.random()},${Math.random()},${Math.floor(Math.random() * 360)}deg)`).join(' ');
                    reel.style.transform = `${transformStr} scale(${1 + Math.random() * 0.5})`;
                    if (count >= 30) {
                        clearInterval(interval);
                        if (index === reels.length - 1) {
                            stopReels();
                        }
                    }
                }, 50);
            });
        });

        function stopReels() {
            // リールを回転前の初期位置に戻す
            reels.forEach((reel, index) => {
                reel.style.transform = initialPositions[index];  // 保存していた初期位置に戻す
            });
        }

        function createPetal() {
            const petal = document.createElement("div");
            petal.className = "petal";
            petal.style.left = Math.random() * 100 + "vw";
            petal.style.animationDuration = (5 + Math.random() * 5) + "s";
            document.body.appendChild(petal);
            setTimeout(() => petal.remove(), 10000);
        }

        setInterval(() => {
            for (let i = 0; i < 10; i++) createPetal();
        }, 100);
    </script>
</body>
</html>
